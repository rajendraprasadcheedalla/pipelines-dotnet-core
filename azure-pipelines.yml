trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  resourceGroupName: 'myTestResourceGroup'
  location: 'East US'
  templateFile: '$(Build.ArtifactStagingDirectory)\armTemplate.json'

steps:
- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Define the ARM template structure
      $armTemplate = @{
          "$schema" = "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#"
          "contentVersion" = "1.0.0.0"
          "resources" = @(
              @{
                  "type" = "Microsoft.Resources/resourceGroups"
                  "apiVersion" = "2021-04-01"
                  "name" = "$(resourceGroupName)"
                  "location" = "$(location)"
              }
          )
      }

      # Convert the ARM template to JSON
      $jsonTemplate = $armTemplate | ConvertTo-Json -Depth 100
      
      # Save the JSON to a file
      $jsonTemplate | Out-File -FilePath "$(templateFile)" -Encoding utf8

      Write-Host "ARM template generated at: $(templateFile)"

- task: AzureCLI@2
  inputs:
    azureSubscription: 'AzureServiceConnectionTest'  # Replace with your Azure service connection name
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Create the resource group if it doesn't exist
      az group create --name $(resourceGroupName) --location $(location)

      # Deploy the ARM template
      az deployment group create --resource-group $(resourceGroupName) --template-file $(templateFile) --parameters @{} # Add parameters if needed

- task: AzureCLI@2
  inputs:
    azureSubscription: 'AzureServiceConnectionTest'  # Replace with your Azure service connection name
    scriptType: 'ps'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Validate the deployment (ensure it was successful)
      $deploymentStatus = az deployment group show --resource-group $(resourceGroupName) --name $(resourceGroupName) --query 'properties.provisioningState' -o tsv

      if ($deploymentStatus -eq "Succeeded") {
          Write-Host "Deployment succeeded."
      } else {
          Write-Error "Deployment failed with status: $deploymentStatus"
          exit 1
      }

# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'AzureServiceConnectionTest'  # Replace with your Azure service connection name
#     scriptType: 'ps'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       # Clean up the resource group after testing
#       az group delete --name $(resourceGroupName) --yes --no-wait
